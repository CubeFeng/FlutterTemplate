# coding: utf-8
# encodng: utf-8
# -*- coding: utf-8 -*-
# vim:set fileencoding=utf-8:
fastlane_require 'sem_version'

default_platform(:ios)

def upload_files_to_minio(path)
  sh("mc", "alias", "set", "fastlane_minio", ENV["MINIO_SERVER"], ENV["MINIO_KEY"], ENV["MINIO_SECRET"])
  FastlaneCore::CommandExecutor.execute(command: "mc cp --recursive #{path} fastlane_minio/flutter-wallet-repo")
end

def get_embed_app_version
  get_flutter_app_version("../pubspec.yaml")
end

def get_wallet_app_version
  version = get_flutter_app_version("../../app/pubspec.yaml")
  v = SemVersion.new(version)
  "#{v.major}.#{v.minor}.#{v.patch}"
end

def get_flutter_app_version(pubspecPath)
  pubspec = YAML.load(json = File.read(pubspecPath))
  pubspec["version"]
end


def update_wallet_app_config_json(platform, commitId)
  _jsonFile = '../../packages/flutter_wallet_assets/assets/config/app.config.json'
  json = File.read(_jsonFile)
  obj = JSON.parse(json)
  obj[platform]["buildTime"] = Time.new.strftime("%y%m%d%H%M")
  obj[platform]["commitId"] = commitId
  obj[platform]["branch"] = git_branch

  _version = get_wallet_app_version()
  obj[platform]["channelVersion"] = _version

  File.write(_jsonFile, JSON.generate(obj))
end

def update_wallet_app_api_env(_apiEnv)
  mainPath = '../../app/lib/main.dart'
  File.open(mainPath) do | lines |
    buffer = lines.read.gsub(/AppEnv.defaultEnv = AppEnvironments.\w+/, "AppEnv.defaultEnv = AppEnvironments.#{_apiEnv}")
    File.open(mainPath, "w") {|l|
      l.write(buffer)
    }
  end
end
